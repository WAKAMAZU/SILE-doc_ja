\begin[papersize=a4,class=book]{document}
%\begin[papersize=152mm x 229mm,class=book]{document}
\script[src=packages/grid]
\script[src=packages/autodoc]
\script[src=packages/verbatim]
\script[src=packages/color]
\script[src=packages/image]
\script[src=packages/frametricks]
\script[src=packages/lorem]
\script[src=packages/bidi]\bidi-off
\script[src=packages/pdf]
\include[src=documentation/macros.sil]
\define[command=silehp]{\code{http://www.sile-typesetter.org/}}
\define[command=sileversion]{0.9.2}
\set[parameter=document.baselineskip,value=3ex]
\font[size=11pt, language="ja", family="Yu Mincho", style="Light"]
\nofolios
%\set[parameter=document.lskip,value=5em]
%\set[parameter=document.rskip,value=5em]
\font[size=50pt,weight=600,family=Calibri]{\hss The SILE Book \hss \par}
\bigskip
\font[size=12pt,family=Calibri]{\hss for SILE version \sileversion \hss \par}
\bigskip[height=3in]
\font[size=20pt,weight=600,family=Calibri]{\hss Simon Cozens \hss \par}
%
%\set[parameter=document.lskip,value=0]
%\set[parameter=document.rskip,value=0]
\set[parameter=document.parskip,value=4pt plus 1pt]
\set[parameter=document.parindent,value=1em]
\set[parameter=document.baselineskip,value=1.6em]
\define[command=untrue]{\color[color=red]{\process}}
\open-double-page
\tableofcontents
\set-counter[id=folio,value=0]
\chapter{SILEとは?}

SILEは組版システムです。その目的は美しい文書を生成することにあります。SILEについて理解する最も良い方法は、あなたが聞いたことがあるであろう他のシステムと比較することでしょう。

\section{SILEとWord}

多くの人たちはパソコンを使って印刷用に文書を作成するとき、Word（Microsoft Officeの一部です）や
Writer（OpenOfficeやLibreOfficeに含まれます）といったソフトウェア、あるいはそれらに似たワープロソフトを利用します。
しかしながら、SILEはワープロソフトではありません。それは組版システムです。そこにはいくつかの重要な違いがあります。

ワープロソフトの目的はあなたがスクリーン上で入力したものと全く同一に見える文書を作成することにあります。一方、SILEはあなたが入力したものを、文書を作成するための指示だとみなし、それをもとに可能な限り良く見える文書を生成します。

少し具体的にみてみましょう。ワープロソフトでは、あなたが入力をしている文章が行の右端にさしかかると、カーソルは自動的に次の行に移動します。ワープロソフトは改行位置をあなたに示してくれます。SILEでは、あなたが文章を入力している段階では改行位置を知らせてくれません。その段階ではまだそれは明らかになっていないからです。あなたは好きなだけ長い行を打ち込むことができます。SILEはそれを処理する段階になって、パラグラフを構築するために、文章の最適な改行位置を探します。この処理はひとつの入力に対して（最大で）3回行われます。2つの連続した行がハイフネートされた語で終わっていないか、などあまりよろしくない状況が考慮され、最適な改行位置が見つかるよう処理が繰り返されます。

ページ分割に対しても同様です。ワープロソフトではいずれあなたは新しいページに移動することになりますが、SILEでは入力自体は好きなだけ継続されます。文章がどのようにページに分割されるかは文書全体のレイアウトを検討したのちに決定されるからです。

ワープロソフトはしばしばWYSIWYG—What You See Is What You Get（見たままが得られる）—であると言われます。SILEは全くWYSIWYGでは\em{ありません}。実際、結果はそれが得られるまで分からないのです。むしろ、SILE文書はテキストエディタ—テキストを入力するためのもので、整形された文書を作成するためのものではない—を用いて準備され、PDF文書を生成するためにSILEによって処理されます。

言い換えると、SILEはあなたが求める結果を記述するための\em{言語}であって、SILEはあなたが与えた指示に対し、最良の印刷物を得るための文書整形の処理を行います。

\section{SILEとTeX}

いくらかの人たちは、なんだかTeXのようだ、と思うかもしれません。\footnote{ひとりのTeXユーザとして言わせれば“なんだかT\glue[width=-.1667em]\lower[height=0.5ex]{E}\glue[width=-.125em]Xのようだ”だろうか。}もしあなたがTeXについてよく知らない、あるいは関心がないのであれば、このセクションは読み飛ばしてもらっても構いません。

実際、TeXのようだというのは正しい意見です。SILEはTeXからかなりのものを引き継いでいます。SILEのような小さなプロジェクトが、TeXという、“The Art of Computer　Programming”の著者たる某教授の、偉大な創造物の後継者だと名乗るのはおこがましいかもしれませんが…SILEはTeXの現代的な再創生です。

TeXは組版システムのなかでも最初期のもののうちのひとつで、それゆえほとんど何もないところから設計されなければなりませんでした。そのうちいくつかは時の試練に耐え—そしてTeXはその創造から30年以上たった今でも最もよく利用される組版システムのうちのひとつであり、それはその設計とパフォーマンスの証である—多くはそうではありませんでした。実際、Knuthの時代からのTeXの発展の歴史の大部分は彼の元々の設計を取り除き、新たな業界標準技術で置き換えることでした。例えば、我々はMETAFONTではなくTrueTypeフォントを使い（xetexのように）、DVIではなくPDFを使い（pstexやpdftex）、7ビットのASCIIではなくUnicodeを使い（これもxetex）、マクロ言語ではなくマークアップ言語や組込みのプログラミング言語を使います（xmltexやluatex）。現在、我々が\em{依然として利用する}TeXのオリジナルの部分は、⑴ボックスとグルー・モデル、⑵ ハイフネーション・アルゴリズム、⑶改行処理アルゴリズムです。

SILEは上記3つの点をTeXから受け継いでいます。SILEはTeXの改行処理アルゴリズムのほぼ丸写しな移植を含み、それは同じ入力が与えられたとき、TeXと全く同じ出力が得られるようにテストされています。しかしながら、SILE自身がスクリプト言語で書かれているため、\footnote{もしもあなたが\code{TeX capacity exceeded}というメッセージに馴染んでいるならば、これはさぞかし興味深いことでしょう。}SILEの組版エンジンの動作を拡張したり、変更したりすることが容易にできます。

例えばTeXが苦手とすることのひとつとしてグリッド上での組版があります。この機能は聖書を組むような人にとっては重要なものです。これをTeX上で行う試みはなされてきましたが、どれもひどいものでした。SILEでは組版エンジンの動作を変更し、ごく簡単なアドオンパッケージを用意することでグリッド上での組版を可能にします。

もちろん、いまどきだれもplain TeXを使いません—だれもがLaTeXで同様のことを行い、そのうえCTANから入手可能な巨大なパッケージ群を活用しています。SILEは未だTeXが持つような巨大なコミュニティやリソースを持たず、そのようなものを活用することができません。この点においてTeXはSILEよりもずっと先を行っています。しかし、\em{可能性}という点において、TeXと同等か、あるいはもっと進んでいるとも言えるところがあるかもしれません。
\supereject

\section{SILEとInDesign}

人々が出版物をデザインするとき辿りつくツールとしてInDesign（あるいはそれと似たDTPソフト、例えばScribus）があります。

\float[rightboundary=7pt, bottomboundary=15pt]{\img[src=documentation/fig1.png,width=150]}
InDesignは複雑で高価な商用出版ツールです。それは非常にグラフィカルです—クリックやドラッグといったマウス操作でテキストや画像をスクリーン上で移動させます。SILEは自由なオープンソースの組版ツールで、完全にテキストベースです。SILEではエディタでコマンドを入力し、それらのコマンドをファイルに保存し、SILEに組版させるために渡します。これらの根本的な違いにかかわらず、この2つには共通した特徴があります。

InDesignでは文章はページ上の\em{フレーム}に流しこまれます。左の図はInDesignでよくあるレイアウトがどのようなものかを示しています。

SILEもまたページ上でどこに文章が表示されるべきかをフレームという概念を用いて決定します。そのためSILEではTeXでできうるよりもっと複雑で柔軟なページレイアウトを設計することが可能です。

InDesignで有用な機能として、構造化されたXMLデータ形式を用いたカタログや名簿などの出版があります。InDesignでこれを行うには、まずそれぞれのXML要素にどのようなスタイルが適用されるか宣言します。データがInDesignに読み込まれると、InDesignは与えられたルールに従ってデータを整形し出力します。

あなたは全く同じことをSILEでできるのです。ただしSILEではXML要素がどのように整形されるのかをより詳細に制御することができ、これはSILEではあなたがXML要素を処理するのに、例えばLuaコードを呼び出したりすることができるからです。SILEはコマンドラインのフィルタープログラムであるため、適切な指示が与えられれば、XMLファイルからPDFへ、いとも簡単に変換することができます。これは素晴らしいことです。

この解説書の最後の章では、複雑なXML文書をスタイル付してPDFを生成するための\em{クラスファイル}のいくつかの例を示します。

\section{結論}

SILEは入力として与えられたテキストの指示をもとにPDFを出力します。SILEはTeXとInDesignにインスパイアされた機能を持ち、かつより柔軟で拡張可能、プログラム可能なものを目指しています。この文書（これはSILEで書かれています）のようなものを作成したり、構造化されたデータを整形して出力するシステムとして有用です。

\chapter{さあ始めよう}

さて、SILEとは何か、何をするものなのか、いくらか理解したところでSILEそのものについて話題を移しましょう。

\section{基本的なSILE文書}

SILEをどうやって使用するのか示す前にSILE文書がどのようなものなのかひとつ例を示しましょう。
これはSILEに対する入力であり、SILEによって処理されPDFファイルへと変換されるものです。

\note{これらの文書はプレーンテキストです。あなたがあなた自身のSILE文書を作成するにはテキストエディタが必要です。Unix上では例えば、\em{vi}や\em{emacs}、Mac OS XではSublime Text、TextMate、あるいはTextEditなど、WindowsではNotepadやNotepad+などです。SILEの入力として用いるにはテキストファイルとして保存する必要があります。Wordのようなワープロソフトでは作成できません。それらは文書をプレーンテキストではなく独自のフォーマットで保存するからです。}

とりあえず、もっとも簡単なSILE文書から始めましょう。

\begin{verbatim}
\line
\\begin[papersize=a4]\{document\}
Hello SILE!
\\end\{document\}
\line
\end{verbatim}

今のところは、SILE文書はこのようなものだというだけにしておいて、詳細は次の章で取り上げましょう。

分かり切ったことを言うようですが、これは左上部に\examplefont{Hello SILE}と書かれ、ページ番号（1）がページ下部中央に配置されたA4サイズのPDF文書を生成します。さて、どうやってそのPDFを得るのでしょうか？

\section{インストール}

なにはともあれ、あなたはSILEを手に入れ、あなたのパソコンで走らせなければなりません。SILEはホームページ\silehpから入手できます。

SILEをインストールし、実行するにはいくつか他のソフトウェアが必要です—Luaプログラミング言語のインタプリタとHarfbuzzテキストシェーピング・ライブラリです。

SILEにはそれ自身のPDF生成ライブラリが付属しており、それもまたいくつかのソフトウェアを要求します。\code{freetype}、\code{fontconfig}、\code{libz}、そして\code{libpng}です。\footnote{代わりにPangoとCairoを使うようにもできますが、その出力は特にLinuxにおいて劣ります。 あえてそうする場合は\code{libcairo-gobject2}と\code{libpango1.0-0}パッケージをシステムにインストールし、\code{lgi} Luaモジュールを追加する必要があります。}Homebrew（Mac OS Xではおすすめです）を利用するMac OS X上でこれらをインストールするには、

\medskip
• \code{brew install automake libtool harfbuzz fontconfig libpng lua luarocks freetype}
\medskip

DebianやUbuntuなどのDebian系Linux OSでは、

\medskip
• \code{apt-get install lua5.1 luarocks libharfbuzz-dev libfreetype6-dev libfontconfig1-dev libpng-dev}
\medskip

Redhat系Linuxでは次のようになるでしょう。

\medskip
• \code{yum install harfbuzz-devel make automake gcc freetype-devel fontconfig-devel
lua-devel lua-lpeg lua-expat libpng-devel}

これらの依存ライブラリがインストールされれば、次はLuaライブラリをそろえる必要があります。

\medskip
• \code{luarocks install lpeg luaexpat}
\medskip

以上のことが済めばようやく本題に移れます。SILEのホームページからダウンロードしたファイルを解凍し、ディレクトリを移動してから以下を実行します。

\medskip
• \code{./configure; make}
\medskip

これが終わればSILEを未インストールの状態で実行できます。\footnote{Mac OS XでSILEをシステムにインストールせずに実行するには、環境変数を次のようにして設定する必要があります\break
\code{DYLD_LIBRARY_PATH=./libtexpdf/.libs ./sile examples/simple.sil}}

\medskip
• \code{./sile examples/simple.sil}
\medskip

すべてが順調であれば、\code{examples/simple.pdf}というファイルが生成されるはずです。

SILEを本格的に使うには\code{sile}コマンドとSILEライブラリ・ファイルをシステムにインストールします。これを行うには次のようにします。

\medskip
• \code{make install}
\medskip

これで\code{sile}コマンドがどのディレクトリからも利用可能になりました。

\section{SILEの実行}

では新たなディレクトリに移り、テキストエディタを開いて先ほど例示した内容をファイル\code{hello.sil}に保存しましょう。そしてコマンドを実行します。

• \code{sile hello}

（SILEは引数のファイル名に拡張子が与えられなければ、自動的に拡張子\code{.sil}を追加します）

これによってファイル\code{hello.pdf}ができるでしょう。あなたはめでたくSILEでの最初の文書を作成することができました。

\section{少し凝ってみる}

\code{examples/article-template.xml}は典型的なDocBook 5.0文書です。DocBookを印刷する場合、しばしば、XSLTプロセッサ、FOプロセッサ、そして場合によっては奇妙なLaTeXパッケージに振り回されなければなりません。しかし、SILEはXMLファイルを読み込むことができ、しかもDocBook（実際にはそのサブセット）を処理するための\code{docbook}クラスが付属しています。

例、\code{examples/article-template.xml}を\code{examples/article-template.pdf}に変換するには、単純にこうします。

\begin{verbatim}
\line
\% \em{./sile -I docbook examples/article-template.xml}
This is SILE \sileversion
Loading docbook
<classes/docbook.sil><examples/article-template.xml>[1] [2] [3]
\line
\end{verbatim}

ここで\code{-I}フラグは入力ファイルを読み込む前に\em{クラス}ファイルを読み込むための指示です。 \code{docbook}クラスファイルが読み込まれたのち、DocBookファイルは直接読み込まれ、タグはSILEコマンドとして解釈されます。

第10章では\code{docbook}クラスがどのようなものか見てみます。そこでは他のXMLフォーマットをいかに処理するか学ぶでしょう。

\chapter{SILE文書の作成}

さて、ここで最初の例に戻りましょう。

\begin{verbatim}
\line
\\begin[papersize=a4]\{document\}
Hello SILE!
\\end\{document\}
\line
\end{verbatim}

文書は\code{\\begin\{document\}}コマンドで始まります。それには用紙サイズの指定が\em{必須}です。そして文書は\code{\\end\{document\}}で終わります。その間には2種類のSILE文書を構成する要素が来ます。ページ上に出力されるテキスト、ここでは“Hello SILE!”、とコマンドです。

\note{\notehead{用紙サイズ}
SILEは国際規格ISOのA・B・Cシリーズの用紙サイズを認識します。これに加えて次の伝統的によく用いられる用紙サイズも利用可能です。letter、note、legal、executive、halfletter、halfexecutive、statement,、folio、quarto、ledger、tabloid。

もしも標準的でない用紙サイズを指定したければ、具体的なサイズを直接指定することも可能です。\code{papersize=\em{<basic length> x <basic length>}}。

\smallskip\notehead{単位}\par
SILEでは長さを指定するいくつかの方法があります。上記\code{<basic length>}は数と単位（の省略記号）の指定からなります。認識される単位はポイント（\code{pt}）、ミリメートル（\code{mm}）、センチメートル（\code{cm}）、インチ（\code{in}）です。例えば、ペーパーバックサイズのB-formatは\code{papersize=198mm x 129mm}のように指定されます。後ほど長さを指定する別の方法についてもみることとなるでしょう。}

\section{テキスト}

通常のテキストについてはこれといって述べることはありません。単に入力してください。

\note{TeXユーザーはSILEがテキストについても何らかの処理を行うものと期待するかもしれません。例えば、あなたがTeXにおいて、ふたつの連続したバッククォート（\code{``}）を入力すると、TeXはそれを開始用のダブルクォート（“）に置き換えてくれます。SILEはそのようなことは行いません。ダブルクォートを入力してください。同様にenダッシュとemダッシュでも、\code{--}や\code{---}ではなく、Unicodeで該当する文字を入力してください。}

テキスト処理においていくつか挙げる点があるとすれば以下のものでしょうか。

まずひとつ目は、スペースの扱いについてです。もしあなたがスペース3つを用いて\code{Hello {} {} SILE!}と書いたとしても、それはスペース1つ分、\code{Hello SILE!}と同じ結果になります。

同様に、改行文字を好きなところに入れることができます。\footnote{訳注：わかち書きをする言語ではです。改行文字はスペース1個分と同じように扱われます。}SILEはパラグラフ全体を取扱い、与えられた行幅で可能な、最適な改行位置を計算します。例として挙げるならば、あなたの入力が仮に

\begin{verbatim}
\line
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
\line
\end{verbatim}

\noindent{}だったとしても、SILEの出力において‘eiusmod’で改行が起こるとは限りません。改行は常に、適切な位置で行われます。実際の出力は以下のようなものとなるでしょう。

\line
\nohyphenation{\examplefont{\quad{}Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.}}
\line

パラグラフを終了する場合は、改行を2個続けて入れてください。例えば、

\begin{verbatim}
\line
Paragraph one.

Paragraph two.
This is not paragraph three.

This is paragraph three.
\line
\end{verbatim}

注意点として挙げられるふたつ目は、いくつかの（４つです）文字はSILEでは特別な意味を持つことです。これらはTeXユーザにとっては馴染み深いものでしょう。

\em{バックスラッシュ}はコマンドの開始に用いられます。（コマンドの詳細については後ほどすぐに述べましょう）\em{波括弧} （\code{\{}、\code{\}}）はグループ化に、特にコマンドの引数を扱う際に、用いられます。最後に\em{パーセント記号}はコメント行の開始として用いられます。パーセント記号から次の改行文字まではSILEによって無視されます。これらの文字を出力したければ、バックスラッシュを前に付けましょう。\code{\\\\}は‘\\’\footnote{訳注：フォントによっては円記号になってしまいます。}を、\code{\\\{}は‘\{’を、\code{\\\}}は‘\}’を、そして\code{\\\%}は‘\%’を出力します。

3つ目の点はハイフネーションです。SILEはそれによってパラグラフ全体の見た目が良くなると判断できるときはいつでも、自動的に語をハイフネートして改行します。ハイフネーションはその時の言語の設定が反映されます。特に指定がなければ、SILEはデフォルトで英語を仮定し、ハイフネーション処理を行います。上記のラテン語のテキストの例ではハイフネーションは無効化されています。

最後に挙げる点はリガチャです。（ふたつあるいはそれ以上の文字が、見た目を良くするために、ひとつの文字に結合される）SILEは自動的にリガチャ処理を行います。このため、あなたがもし\code{affluent
fishing}と入力すると（実際には使用するフォントに依存します）、出力結果は‘\examplefont{affluent fishing}’のようになります。リガチャを抑制したい場合は、空のグループ（グループ化文字\code{\{}と\code{\}}を使って）を挿入します。\code{af\{\}f\{\}luent f\{\}ishing}では\examplefont{af{}f{}luent f{}ishing}のようになります。リガチャやそのほかの機能の制御に関する詳細については\em{OpenTypeフィーチャ}の節を参照してください。

\section{コマンド}

Typically (and we’ll unpack that
statement later), SILE commands are made up of a backslash followed by a
command name, and a document starts with a \code{\\begin\{document\}} command
and ends with \code{\\end\{document\}}.

A command may also take two other optional components: some \em{parameters}, and an \em{argument}. The \code{\\begin} command at the start of the document is an
example of this.\footnote{Strictly speaking \code{\\begin} isn’t actually a command
but we’ll pretend that it is for now and get to the details in a moment.}

\begin{verbatim}
\line
\\begin[papersize=a4]\{document\}
\line
\end{verbatim}

The parameters to a command are enclosed in square brackets and take the form
\code{\em{key}=\em{value}};\break{}multiple parameters are separated by commas
or semicolons,
as in \code{[key1=value1,key2=value2,\dots]} Spaces around
the keys are not significant; we could equally write that as
\code{[key1 = value1; key2 = value2; \dots]}. If you need to include a comma or
semicolon within the value to a parameter, you can enclose the value in quotes:
\code{[key1 = "value1, still value 1", key2 = value2; \dots]}.

The optional argument (of which
there can only be at most one) is enclosed in curly braces.\footnote{TeX users
may forget this and try adding a command argument “bare”, without the braces.
This won’t work; in SILE, the braces are mandatory.}

Here are a few more examples of SILE commands:

\begin{verbatim}
\line
\\eject                               \% A command with no parameters or argument

\\font[family=Times,size=10pt]           \% Parameters, but no argument

\\chapter\{Introducing SILE\}             \% Argument but no parameters

\\font[family=Times,size=10pt]\{Hi there!\} \% Parameters and argument
\line
\end{verbatim}%
\section{Environments}

Commands like \code{\\chapter} and \code{\\em} (emphasises text by
making it italic) are normally used to enclose a relatively small piece
of text; a few lines at most. Where you want to enclose a larger piece of
the document, you can use an \em{environment}; an environment begins
with \code{\\begin\{\em{name}\}} and encloses all the text up until the
corresponding \code{\\end\{\em{name}\}}. We’ve already seen an example,
the \code{document} environment, which must enclose the \em{entire} document.

Here is a secret: there is absolutely no difference between a command and
an environment. In other words, the following two forms are equivalent:

\begin{verbatim}
\line
\\font[family=Times,size=10pt]\{Hi there!\}

\\begin[family=Times,size=10pt]\{font\}
Hi there!
\\end\{font\}
\line
\end{verbatim}

However, in some cases the environment form of the command will be easier
to read and will help you to be clearer on where the command begins and ends.

\section{The XML Flavour}

While we’re on the subject of alternative forms, SILE can actually process its
input in a completely different file format. What we’ve seen so far has
been SILE’s “TeX-like flavor”, but if the first character of the
input file is an angle bracket (\code{<}) then SILE will interpret its input
as an XML file. (If it isn’t well-formed XML, then SILE will get very upset.)

Any XML tags within the input file will then be regarded as SILE commands,
and tag attributes are interpreted as command parameters;
from then on, the two file formats are exactly equivalent, with one exception:
instead of a \code{<document>} tag, SILE documents can be enclosed in \em{any}
tag. (Although \code{<sile>} is conventional for SILE documents.)

In other words, the XML form of the above document would be:

\begin{verbatim}
\line
<sile papersize="a4">
Hello SILE!
</sile>
\line
\end{verbatim}

Commands without an argument need to be well-formed self-closing XML tags
(for instance, \code{<break/>}), and commands with parameters should have
well-formed attributes. The example above, in XML flavor, would look like this:

\begin{verbatim}
\line
<font family="Times" size="10pt">Hi there!</font>
\line
\end{verbatim}

We don’t expect humans to write their documents in SILE’s XML flavor—the
TeX-like flavor is much better for that—but having an XML flavor allows for
computers to deal with SILE a lot more easily. One could create
graphical user interfaces to edit SILE documents, or convert other XML formats
to SILE.

However, there is an even smarter way of processing XML with SILE. For this,
you need to know that you can define your own SILE commands, which can range
from very simple formatting to fundamentally changing the way that SILE operates.
If you have a file in some particular XML format—let’s say it’s a DocBook file—and
you define SILE commands for each possible DocBook tag, then the DocBook file
becomes a valid SILE input file, as-is.

In the final two chapters, we’ll provide
some examples of defining SILE commands and processing XML documents.

\end{document}
