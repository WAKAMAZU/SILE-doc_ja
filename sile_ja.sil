\begin[papersize=a4,class=book]{document}
%\begin[papersize=152mm x 229mm,class=book]{document}
\script[src=packages/grid]
\script[src=packages/autodoc]
\script[src=packages/verbatim]
\script[src=packages/color]
\script[src=packages/image]
\script[src=packages/frametricks]
\script[src=packages/lorem]
\script[src=packages/bidi]\bidi-off
\script[src=packages/pdf]
\include[src=documentation/macros.sil]
\define[command=silehp]{\code{http://www.sile-typesetter.org/}}
\define[command=sileversion]{0.9.2}
\font[size=10pt, language="ja", family="Yu Mincho", weight="300"]
\nofolios
%\set[parameter=document.lskip,value=5em]
%\set[parameter=document.rskip,value=5em]
\font[size=50pt,weight=600,family=Calibri]{\hss The SILE Book \hss \par}
\bigskip
\font[size=12pt,family=Calibri]{\hss for SILE version \sileversion \hss \par}
\bigskip[height=3in]
\font[size=20pt,weight=600,family=Calibri]{\hss Simon Cozens \hss \par}
%
%\set[parameter=document.lskip,value=0]
%\set[parameter=document.rskip,value=0]
\set[parameter=document.parskip,value=4pt plus 1pt]
\set[parameter=document.parindent,value=1em]
\set[parameter=document.baselineskip,value=1.8em]
\define[command=untrue]{\color[color=red]{\process}}
\open-double-page
\tableofcontents
\set-counter[id=folio,value=0]
\chapter{SILEとは?}

SILEは組版システムです。その目的は美しい文書を生成することにあります。SILEについて理解する最も良い方法は、あなたが聞いたことがあるであろう他のシステムと比較することでしょう。

\section{SILEとWord}

多くの人たちはパソコンを使って印刷用に文書を作成するとき、Word（Microsoft Officeの一部です）や
Writer（OpenOfficeやLibreOfficeに含まれます）といったソフトウェア、あるいはそれらに似たワープロソフトを利用します。
しかしながら、SILEはワープロソフトではありません。それは組版システムです。そこにはいくつかの重要な違いがあります。

ワープロソフトの目的はあなたがスクリーン上で入力したものと全く同一に見える文書を作成することにあります。一方、SILEはあなたが入力したものを、文書を作成するための指示だとみなし、それをもとに可能な限り良く見える文書を生成します。

少し具体的にみてみましょう。ワープロソフトでは、あなたが入力をしている文章が行の右端にさしかかると、カーソルは自動的に次の行に移動します。ワープロソフトは改行位置をあなたに示してくれます。SILEでは、あなたが文章を入力している段階では改行位置を知らせてくれません。その段階ではまだそれは明らかになっていないからです。あなたは好きなだけ長い行を打ち込むことができます。SILEはそれを処理する段階になって、パラグラフを構築するために、文章の最適な改行位置を探します。この処理はひとつの入力に対して（最大で）3回行われます。ふたつの連続した行がハイフネートされた語で終わっていないか、などあまりよろしくない状況が考慮され、最適な改行位置が見つかるよう処理が繰り返されます。

ページ分割に対しても同様です。ワープロソフトではいずれあなたは新しいページに移動することになりますが、SILEでは入力自体は好きなだけ継続されます。文章がどのようにページに分割されるかは文書全体のレイアウトを検討したのちに決定されるからです。

ワープロソフトはしばしばWYSIWYG—What You See Is What You Get（見たままが得られる）—であると言われます。SILEは全くWYSIWYGでは\em{ありません}。実際、結果はそれが得られるまで分からないのです。むしろ、SILE文書はテキストエディタ—テキストを入力するためのもので、整形された文書を作成するためのものではない—を用いて準備され、PDF文書を生成するためにSILEによって処理されます。

言い換えると、SILEはあなたが求める結果を記述するための\em{言語}であって、SILEはあなたが与えた指示に対し、最良の印刷物を得るための文書整形の処理を行います。

\section{SILEとTeX}

いくらかの人たちは、なんだかTeXのようだ、と思うかもしれません。\footnote{ひとりのTeXユーザとして言わせれば“なんだかT\glue[width=-.1667em]\lower[height=0.5ex]{E}\glue[width=-.125em]Xのようだ”だろうか。}もしあなたがTeXについてよく知らない、あるいは関心がないのであれば、このセクションは読み飛ばしてもらっても構いません。

実際、TeXのようだというのは正しい意見です。SILEはTeXからかなりのものを引き継いでいます。SILEのような小さなプロジェクトが、TeXという、“The Art of Computer Programming”の著者たる某教授の、偉大な創造物の後継者だと名乗るのはおこがましいかもしれませんが\dots{}SILEはTeXの現代的な再創生です。

TeXは組版システムのなかでも最初期のもののうちのひとつで、それゆえほとんど何もないところから設計されなければなりませんでした。そのうちいくつかは時の試練に耐え—そしてTeXはその創造から30年以上たった今でも最もよく利用される組版システムのうちのひとつであり、それはその設計とパフォーマンスの証である—多くはそうではありませんでした。実際、Knuthの時代からのTeXの発展の歴史の大部分は彼の元々の設計を取り除き、新たな業界標準技術で置き換えることでした。例えば、我々はMETAFONTではなくTrueTypeフォントを使い（xetexのように）、DVIではなくPDFを使い（pstexやpdftex）、7ビットのASCIIではなくUnicodeを使い（これもxetex）、マクロ言語ではなくマークアップ言語や組込みのプログラミング言語を使います（xmltexやluatex）。現在、我々が\em{依然として利用する}TeXのオリジナルの部分は、⑴ボックスとグルー・モデル、⑵ ハイフネーション・アルゴリズム、⑶改行処理アルゴリズムです。

SILEは上記3つの点をTeXから受け継いでいます。SILEはTeXの改行処理アルゴリズムのほぼ丸写しな移植を含み、それは同じ入力が与えられたとき、TeXと全く同じ出力が得られるようにテストされています。しかしながら、SILE自身がスクリプト言語で書かれているため、\footnote{もしもあなたが\code{TeX capacity exceeded}というメッセージに馴染んでいるならば、これはさぞかし興味深いことでしょう。}SILEの組版エンジンの動作を拡張したり、変更したりすることが容易にできます。

例えばTeXが苦手とすることのひとつとしてグリッド上での組版があります。この機能は聖書を組むような人にとっては重要なものです。これをTeX上で行う試みはなされてきましたが、どれもひどいものでした。SILEでは組版エンジンの動作を変更し、ごく簡単なアドオンパッケージを用意することでグリッド上での組版を可能にします。

もちろん、いまどきだれもplain TeXを使いません—だれもがLaTeXで同様のことを行い、そのうえCTANから入手可能な巨大なパッケージ群を活用しています。SILEは未だTeXが持つような巨大なコミュニティやリソースを持たず、そのようなものを活用することができません。この点においてTeXはSILEよりもずっと先を行っています。しかし、\em{可能性}という点において、TeXと同等か、あるいはもっと進んでいるとも言えるところがあるかもしれません。
\supereject

\section{SILEとInDesign}

人々が出版物をデザインするとき辿りつくツールとしてInDesign（あるいはそれと似たDTPソフト、例えばScribus）があります。

\float[rightboundary=7pt, bottomboundary=15pt]{\img[src=documentation/fig1.png,width=150]}
InDesignは複雑で高価な商用出版ツールです。それは非常にグラフィカルです—クリックやドラッグといったマウス操作でテキストや画像をスクリーン上で移動させます。SILEは自由なオープンソースの組版ツールで、完全にテキストベースです。SILEではエディタでコマンドを入力し、それらのコマンドをファイルに保存し、SILEに組版させるために渡します。これらの根本的な違いにかかわらず、この2つには共通した特徴があります。

InDesignでは文章はページ上の\em{フレーム}に流しこまれます。左の図はInDesignでよくあるレイアウトがどのようなものかを示しています。

SILEもまたページ上でどこに文章が表示されるべきかをフレームという概念を用いて決定します。そのためSILEではTeXでできうるよりもっと複雑で柔軟なページレイアウトを設計することが可能です。

InDesignで有用な機能として、構造化されたXMLデータ形式を用いたカタログや名簿などの出版があります。InDesignでこれを行うには、まずそれぞれのXML要素にどのようなスタイルが適用されるか宣言します。データがInDesignに読み込まれると、InDesignは与えられたルールに従ってデータを整形し出力します。

あなたは全く同じことをSILEでできるのです。ただしSILEではXML要素がどのように整形されるのかをより詳細に制御することができ、これはSILEではあなたがXML要素を処理するのに、例えばLuaコードを呼び出したりすることができるからです。SILEはコマンドラインのフィルタープログラムであるため、適切な指示が与えられれば、XMLファイルからPDFへ、いとも簡単に変換することができます。これは素晴らしいことです。

この解説書の最後の章では、複雑なXML文書をスタイル付してPDFを生成するための\em{クラスファイル}のいくつかの例を示します。

\section{結論}

SILEは入力として与えられたテキストの指示をもとにPDFを出力します。SILEはTeXとInDesignにインスパイアされた機能を持ち、かつより柔軟で拡張可能、プログラム可能なものを目指しています。この文書（これはSILEで書かれています）のようなものを作成したり、構造化されたデータを整形して出力するシステムとして有用です。

\chapter{さあ始めよう}

さて、SILEとは何か、何をするものなのか、いくらか理解したところでSILEそのものについて話題を移しましょう。

\section{基本的なSILE文書}

SILEをどうやって使用するのか示す前に、SILE文書がどのようなものなのかひとつ例を示しましょう。
これはSILEに対する入力であり、SILEによって処理されPDFファイルへと変換されるものです。

\note{これらの文書はプレーンテキストです。あなたがあなた自身のSILE文書を作成するにはテキストエディタが必要です。Unix上では例えば、\em{vi}や\em{emacs}、Mac OS XではSublime Text、TextMate、あるいはTextEditなど、WindowsではNotepadやNotepad+などです。SILEの入力として用いるにはテキストファイルとして保存する必要があります。Wordのようなワープロソフトでは作成できません。それらは文書をプレーンテキストではなく独自のフォーマットで保存するからです。}

とりあえず、もっとも簡単なSILE文書から始めましょう。

\begin{verbatim}
\line
\\begin[papersize=a4]\{document\}
Hello SILE!
\\end\{document\}
\line
\end{verbatim}

今のところは、SILE文書はこのようなものだというだけにしておいて、詳細は次の章で取り上げましょう。

分かり切ったことを言うようですが、これは左上部に\examplefont{Hello SILE}と書かれ、ページ番号（1）がページ下部中央に配置されたA4サイズのPDF文書を生成します。さて、どうやってそのPDFを得るのでしょうか？

\section{インストール}

なにはともあれ、あなたはSILEを手に入れ、あなたのパソコンで走らせなければなりません。SILEはホームページ\silehpから入手できます。

SILEをインストールし、実行するにはいくつか他のソフトウェアが必要です—Luaプログラミング言語のインタプリタとHarfbuzzテキストシェーピング・ライブラリです。

SILEにはそれ自身のPDF生成ライブラリが付属しており、それもまたいくつかのソフトウェアを要求します。\code{freetype}、\code{fontconfig}、\code{libz}、そして\code{libpng}です。\footnote{代わりにPangoとCairoを使うようにもできますが、その出力は特にLinuxにおいて劣ります。 あえてそうする場合は\code{libcairo-gobject2}と\code{libpango1.0-0}パッケージをシステムにインストールし、\code{lgi} Luaモジュールを追加する必要があります。}Homebrew（Mac OS Xではおすすめです）を利用するMac OS X上でこれらをインストールするには、

\medskip
• \code{brew install automake libtool harfbuzz fontconfig libpng lua luarocks freetype}
\medskip

DebianやUbuntuなどのDebian系Linux OSでは、

\medskip
• \code{apt-get install lua5.1 luarocks libharfbuzz-dev libfreetype6-dev libfontconfig1-dev libpng-dev}
\medskip

Redhat系Linuxでは次のようになるでしょう。

\medskip
• \code{yum install harfbuzz-devel make automake gcc freetype-devel fontconfig-devel
lua-devel lua-lpeg lua-expat libpng-devel}

これらの依存ライブラリがインストールされれば、次はLuaライブラリをそろえる必要があります。

\medskip
• \code{luarocks install lpeg luaexpat}
\medskip

以上のことが済めばようやく本題に移れます。SILEのホームページからダウンロードしたファイルを解凍し、ディレクトリを移動してから以下を実行します。

\medskip
• \code{./configure; make}
\medskip

これが終わればSILEを未インストールの状態で実行できます。\footnote{Mac OS XでSILEをシステムにインストールせずに実行するには、環境変数を次のように設定する必要があります\break
\code{DYLD_LIBRARY_PATH=./libtexpdf/.libs ./sile examples/simple.sil}}

\medskip
• \code{./sile examples/simple.sil}
\medskip

すべてが順調であれば、\code{examples/simple.pdf}というファイルが生成されるはずです。

SILEを本格的に使うには\code{sile}コマンドとSILEライブラリ・ファイルをシステムにインストールします。これを行うには次のようにします。

\medskip
• \code{make install}
\medskip

これで\code{sile}コマンドがどのディレクトリからも利用可能になりました。

\section{SILEの実行}

では新たなディレクトリに移り、テキストエディタを開いて先ほど例示した内容をファイル\code{hello.sil}に保存しましょう。そしてコマンドを実行します。

• \code{sile hello}

（SILEは引数のファイル名に拡張子が与えられなければ、自動的に拡張子\code{.sil}を追加します）

これによってファイル\code{hello.pdf}ができるでしょう。あなたはめでたくSILEでの最初の文書を作成することができました。

\section{もうちょっとクールに}

\code{examples/article-template.xml}は典型的なDocBook 5.0文書です。DocBookを印刷する場合、しばしば、XSLTプロセッサ、FOプロセッサ、そして場合によっては奇妙なLaTeXパッケージに振り回されなければなりません。しかし、SILEはXMLファイルを読み込むことができ、しかもDocBook（実際にはそのサブセット）を処理するための\code{docbook}クラスが付属しています。

例、\code{examples/article-template.xml}を\code{examples/article-template.pdf}に変換するには、単純にこうします。

\begin{verbatim}
\line
\% \em{./sile -I docbook examples/article-template.xml}
This is SILE \sileversion
Loading docbook
<classes/docbook.sil><examples/article-template.xml>[1] [2] [3]
\line
\end{verbatim}

ここで\code{-I}フラグは入力ファイルを読み込む前に\em{クラス}ファイルを読み込むための指示です。 \code{docbook}クラスファイルが読み込まれたのち、DocBookファイルは直接読み込まれ、タグはSILEコマンドとして解釈されます。

第10章では\code{docbook}クラスがどのようなものか見てみます。そこでは他のXMLフォーマットをいかに処理するか学ぶでしょう。

\chapter{SILE文書の作成}

さて、ここで最初の例に戻りましょう。

\begin{verbatim}
\line
\\begin[papersize=a4]\{document\}
Hello SILE!
\\end\{document\}
\line
\end{verbatim}

文書は\code{\\begin\{document\}}コマンドで始まります。それには用紙サイズの指定が\em{必須}です。そして文書は\code{\\end\{document\}}で終わります。その間には2種類のSILE文書を構成する要素が来ます。ページ上に出力されるテキスト、ここでは“Hello SILE!”、とコマンドです。

\note{\notehead{用紙サイズ}
SILEは国際規格ISOのA・B・Cシリーズの用紙サイズを認識します。これに加えて次の伝統的によく用いられる用紙サイズも利用可能です。letter、note、legal、executive、halfletter、halfexecutive、statement、folio、quarto、ledger、tabloid。

もしも標準的でない用紙サイズを指定したければ、具体的なサイズを直接指定することも可能です。\code{papersize=\em{<basic length> x <basic length>}}。

\smallskip\notehead{単位}\par
SILEでは長さを指定するいくつかの方法があります。上記\code{<basic length>}は数と単位（の省略記号）の指定からなります。認識される単位はポイント（\code{pt}）、ミリメートル（\code{mm}）、センチメートル（\code{cm}）、インチ（\code{in}）です。例えば、ペーパーバックサイズのB-formatは\code{papersize=198mm x 129mm}のように指定されます。後ほど長さを指定する別の方法についてもみることとなるでしょう。}

\section{テキスト}

通常のテキストについてはこれといって述べることはありません。単に入力してください。

\note{TeXユーザーはSILEがテキストについても何らかの処理を行うものと期待するかもしれません。例えば、あなたがTeXにおいて、ふたつの連続したバッククォート（\code{``}）を入力すると、TeXはそれを開始用のダブルクォート（“）に置き換えてくれます。SILEはそのようなことは行いません。ダブルクォートを入力してください。同様にenダッシュとemダッシュでも、\code{--}や\code{---}ではなく、Unicodeで該当する文字を入力してください。}

テキスト処理においていくつか挙げる点があるとすれば以下のものでしょうか。

まずひとつ目は、スペースの扱いについてです。もしあなたがスペース3つを用いて\code{Hello {} {} SILE!}と書いたとしても、それはスペース1つ分、\code{Hello SILE!}と同じ結果になります。

同様に、改行文字を好きなところに入れることができます。\footnote{訳注：わかち書きをする言語ではです。改行文字はスペース1個分と同じように扱われます。}SILEはパラグラフ全体を取扱い、与えられた行幅で可能な、最適な改行位置を計算します。例として挙げるならば、あなたの入力が仮に

\begin{verbatim}
\line
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
\line
\end{verbatim}

\noindent{}だったとしても、SILEの出力において‘eiusmod’で改行が起こるとは限りません。改行は常に、適切な位置で行われます。実際の出力は以下のようなものとなるでしょう。

\line
\nohyphenation{\examplefont{\quad{}Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.}}
\line

パラグラフを終了する場合は、改行を2個続けて入れてください。例えば、

\begin{verbatim}
\line
Paragraph one.

Paragraph two.
This is not paragraph three.

This is paragraph three.
\line
\end{verbatim}

注意点として挙げられるふたつ目は、いくつかの（４つです）文字はSILEでは特別な意味を持つことです。これらはTeXユーザにとっては馴染み深いものでしょう。

\em{バックスラッシュ}はコマンドの開始に用いられます。（コマンドの詳細については後ほどすぐに述べましょう）\em{波括弧} （\code{\{}、\code{\}}）はグループ化に、特にコマンドの引数を扱う際に、用いられます。最後に\em{パーセント記号}はコメント行の開始として用いられます。パーセント記号から次の改行文字まではSILEによって無視されます。これらの文字を出力したければ、バックスラッシュを前に付けましょう。\code{\\\\}は‘\\’\footnote{訳注：フォントによっては円記号になってしまいます。}を、\code{\\\{}は‘\{’を、\code{\\\}}は‘\}’を、そして\code{\\\%}は‘\%’を出力します。

3つ目の点はハイフネーションです。SILEはそれによってパラグラフ全体の見た目が良くなると判断できるときはいつでも、自動的に語をハイフネートして改行します。ハイフネーションはその時の言語の設定が反映されます。特に指定がなければ、SILEはデフォルトで英語を仮定し、ハイフネーション処理を行います。上記のラテン語のテキストの例ではハイフネーションは無効化されています。

最後に挙げる点はリガチャです。（ふたつあるいはそれ以上の文字が、見た目を良くするために、ひとつの文字に結合される）SILEは自動的にリガチャ処理を行います。このため、あなたがもし\code{affluent
fishing}と入力すると（実際には使用するフォントに依存します）、出力結果は‘\examplefont{affluent fishing}’のようになります。リガチャを抑制したい場合は、空のグループ（グループ化文字\code{\{}と\code{\}}を使って）を挿入します。\code{af\{\}f\{\}luent f\{\}ishing}では\examplefont{af{}f{}luent f{}ishing}のようになります。リガチャやそのほかの機能の制御に関する詳細については\em{OpenTypeフィーチャ}の節を参照してください。

\section{コマンド}

典型的な（この点に関しては後ほど再検討しましょう）SILEコマンドは、バックスラッシュで始まり、コマンド名が続く文字列です。そして文書は\code{\\begin\{document\}}コマンドで始まり、\code{\\end\{document\}}で終わります。

コマンドはまた、ふたつの必須でない部分を持ちます。それはパラメータと引数です。文書を開始する時の\code{\\begin}コマンドはその良い例です。\footnote{厳密に言うと\code{\\begin}はコマンドではありませんが、とりあえず今はそういうことにしときましょう。}

\begin{verbatim}
\line
\\begin[papersize=a4]\{document\}
\line
\end{verbatim}

コマンドのパラメータは角括弧で囲まれ、\code{\em{key}=\em{value}}の形をとります。\break{}複数のパラメータを指定する場合は、コンマやセミコロンを使って、\code{[key1=value1,key2=value2,\dots]}のように続けます。"key"の前後のスペースは重要ではありません。\code{[key1 = value1; key2 = value2; \dots]}のように書くこともできます。もしもコンマやセミコロンをパラメータの値に使いたければ、引用符で値全体を囲います。\code{[key1 = "value1, still value 1", key2 = value2; \dots]}のように。

コマンドは引数をとるかもしれませんが、その場合は波括弧で囲います。\footnote{TeXユーザはつい括弧を忘れてしまうかもしれませんが、それはいけません。SILEでは括弧は必須です。}

以下にいくつかのSILEコマンドを示しましょう。

\begin{verbatim}
\line
\\eject                                 \% A command with no parameters or argument

\\font[family=Times,size=10pt]          \% Parameters, but no argument

\\chapter\{Introducing SILE\}               \% Argument but no parameters

\\font[family=Times,size=10pt]\{Hi there!\} \% Parameters and argument
\line
\end{verbatim}%
\section{環境}

\code{\\chapter}や\code{\\em} (イタリック体による強調)といったコマンドは、せいぜい数行の比較的短いテキストを囲むために用いられます。もっと長い、文書の一部を構成する部分を囲みたい場合は、\em{環境}を使います。環境は\code{\\begin\{\em{name}\}}で始まり、対応する\code{\\end\{\em{name}\}}までをその中に含みます。ひとつの例が既に出ていますね。\code{document}環境で、これは文書\em{全体}を囲みます。

内緒ですが、コマンドと環境の間には全く違いはありません。いうなれば、以下のふたつは等価なのです。

\begin{verbatim}
\line
\\font[family=Times,size=10pt]\{Hi there!\}

\\begin[family=Times,size=10pt]\{font\}
Hi there!
\\end\{font\}
\line
\end{verbatim}

しかしながら、いくつかの場面では、環境を用いたほうが読みやすく、どこからどこまでコマンドが影響するのか認識しやすくまります。

\section{XML書式}

実際のところ、SILEはこれまで示したものとは完全に異なる入力フォーマットを受け付けます。
これまで例示してきたのもは「TeX風書式」でしたが、もし入力ファイルの最初の文字が山括弧（実際は不等号記号\code{<}）であった場合は、SILEは入力ファイルがXML書式であると捉えます。［もしそれが整形式の（well-formed）XML文書でなければ、SILEは非常に機嫌を損ねるでしょう］

入力ファイル中のすべてのXMLタグは、SILEコマンドであると解釈され、属性はパラメータであるとみなされます。このため、ふたつのファイルフォーマットは実際的には等価です。ただひとつの例外を除いては。XML書式の場合はSILE文書は\em{任意の}タグで始まってもよいのです。（習慣としてSILE文書には\code{<sile>}を用いるのが好ましいですが）

例えば、XML形式で前述の例文を示すと、

\begin{verbatim}
\line
<sile papersize="a4">
Hello SILE!
</sile>
\line
\end{verbatim}

引数を取らないコマンドはすべて整形式のself-closing\footnote{訳注：適切な訳語が分からないが、開始・終了のペアではなく、単体で存在するタグのこと。}タグ（例えば\code{<break/>}）でなければならず、パラメータ付のコマンドはその属性が整形式でなければなりません。前に挙げた例をXML書式で書くと、

\begin{verbatim}
\line
<font family="Times" size="10pt">Hi there!</font>
\line
\end{verbatim}

XML書式は人間が直接書くことを想定しているわけではありませんが—TeX風書式のほうがそれには向いているでしょう—XML書式に対応することは、コンピューターでSILEを扱うのをより容易にします。例えばSILE文書を編集するためのGUIインターフェイスを作ったり、他のXML書式をSILEのそれに変換したり。

しかしながら、SILEにおいてはXML文書を処理するためのよりスマートな方法が存在します。そのためには、あなたはあなた自身のSILEコマンド、それは非常に単純な文書整形用のものからSILEの動作を根本から変えるものまでを含む、を定義できることを知る必要があります。あなたがある特定のXML形式のファイル—仮にDocBookとしましょう—を持っているとします。あなたはすべての可能なDocBookタグに対するSILEコマンドを定義します。するとあなたのDocBookファイルはSILE入力ファイルとしてそのまま使えるようになるのです。

最後の2章では、SILEコマンドを定義とXML文書を処理する例を示しましょう。

\chapter{SILEコマンド}

さて、それではSILEの具体的な使用法について見ていきましょう。まずはあなたがSILEで文書を作成し始めるのに最も役立つコマンドから始め、次第により細かな点について進んでいきます。

\section{フォント}

テキストの見た目を変えるもっとも基本的なコマンドは\code{\\font}コマンドです。これは次のような書式をとります。

\noindent{}• \code{\\font[\em{parameters\dots}]\{\em{argument}\}}

\noindent{}• \code{\\font[\em{parameters\dots}]}

最初の書式では引数として与えられたテキストを指定されたフォントで描画します。次の書式ではそれ以降のテキストすべてに影響します。

例として挙げると、

\begin{verbatim}
\line
Small text

\\font[size=15pt]%
Big text!

\\font[size=30pt]\{Bigger text\}

Still big text!
\line
\end{verbatim}

\noindent{}は

\begin{examplefont}%
\line%
Small text

\noindent\font[size=15pt]%
Big text!

\noindent\font[size=30pt]{Bigger text}

\noindent{}Still big text!
\line
\end{examplefont}

\noindent{}となります。

\font[size=10pt]%

ここで見たように、属性として可能なものとして、\code{size}があります。これは、\code{<dimension>}で指定されます。ここで、\code{<dimension>}は以前登場した\code{<basic length>}のようなものですが、これは現在のフォントのサイズに対する相対的な値として指定可能です。例えば、exユニット（\code{ex}）、であったり、emユニット（\code{em}）、あるいはenユニット（\code{en}）です。


\code{\\font}コマンドで指定可能な属性値は、

\medskip

\noindent{}• \em{size}－先に述べたとおりです。

\noindent{}• \em{family}－使用するフォント名が来ます。フォントをその名前で指定するには、SILEはシステムにインストールされたすべてのフォントについて知る必要があります。SILEのXML書式では、フォントファミリーはCSS形式のコンマで分離された‘スタック’として指定可能です。

\noindent{}• \em{style}－\code{normal}または\code{italic}です。

\noindent{}• \em{weight}－CSS形式のウェイトを表す数値が来ます。有効な値は\font[weight=100]{100}と\font[weight=200]{200}から\font[weight=300]{300}、\font[weight=400]{400}、\font[weight=500]{500}、\font[weight=600]{600}、\font[weight=700]{700}、\font[weight=800]{800}、\font[weight=900]{900}までです。フォントによっては全てのウェイトがサポートされているとは限りませんが（ふたつ程度かもしれません)、SILEは最も近いものを選択します。

\noindent{}• \em{language}－2文字からなる（ISO639-1）言語コードです。これはスペーシングとハイフネーションの両方に影響を与えます。

\noindent{}• \em{direction}－これは書字方向が左から右の場合では\code{LTR}、あるいは右から左の場合は\code{RTL}となります。もしも指定されていなければ、デフォルトで左から右となります。

\noindent{}• \em{script}－スクリプト（文字体系、用字系）の指定です。後で述べる「言語とハイフネーション」の節を参照してください。
\medskip

手動で陽にフォント指定を行うのは非常に面倒ですね。後ほどこれを自動化する方法についても見てみましょう。SILEは\code{\\em\{\dots\}}コマンドを\code{\\font[style=italic]\{\dots\}}のショートカットとして提供します。ボールド体に対するショートカットはありません。なぜならそれはあまり良い習慣とは言えないからです。そのようなものを簡単に行う方法は与えないことにしましょう。

\section{文書構造}

SILEは様々な文書\em{クラス}（LaTeXのクラスと似た）を提供します。デフォルトでは、文書の構造化をごくわずかにサポートするのみの、\em{plain}クラスが用いられます。他には\em{book}クラスがあり、これは左右のページマスタ、ヘッダと脚注、章、節などのヘッディングをサポートします。

この節のコマンドを使うには、あなたの文書の\code{\\begin\{document\}}コマンドで\em{book}クラスを指定する必要があります。あなたが今読んでいるこの文書は実際に、\code{\\begin[papersize=a4,class=book]\{document\}}で始まります。

\subsection{章と節}

あなたは文書を\code{\\chapter\{\dots\}}、\code{\\section\{\dots\}}、そして \code{\\subsection\{\dots\}}などのコマンドを使って分割することができます。これらのコマンドは引数として、その章や節のタイトルをとります。章は新たな左ページから始まり、章のタイトルは左ページのヘッダに表示されます。加えて、節のタイトルは右ページのヘッダに表示されます。

\note{章や節は自動的に１から番号付けされて開始されます。この動作を変更するには、次の章の\code{counters}パッケージの解説を参照してください。番号付けを抑制したければ、パラメータ\code{[numbering=no]}を与えます。}

この副節はコマンド\code{\\subsection\{}章と節\code{\}}で開始されています。

\subsection{脚注}

脚注は\code{\\footnote\{\dots\}}コマンドでつけることができます。\footnote{このように。 \code{\\footnote\{}このように\code{\}}。}脚注コマンドに対する引数はページ下部に表示される脚注の内容です。これは各章ごとに、自動的に１から番号付けされます。

\section{インデントとスペーシング}

SILEでは、パラグラフは通常インデントされます（デフォルトで20ポイント幅です）。これを抑制するには\code{\\noindent}コマンドを、パラグラフの先頭に付与します。(このパラグラフのような、最初のパラグラフでは\code{\\noindent}は必要ありません。なぜなら\code{\\section}と\code{\\chapter}は自動的に、章や節のタイトルに続く文章に対してそれを呼ぶからです）\code{\\noindent}は\code{\\indent}コマンドを続けて呼ぶことで打ち消すことができます。

パラグラフ間、あるいはパラグラフと他の要素との間の垂直方向のスペース分量を増やすには、 \code{\\smallskip}、\code{\\medskip}および\code{\\bigskip}が使えます。これらはそれぞれ、3pt、6pt、12ptのスペースに相当します。このパラグラフの後に\code{\\bigskip}を入れてみましょう。

\bigskip%
水平方向のスペースを行ないに挿入するには、小さなものから大きなものへ順に、\code{\\thinspace} （emの1/6）、\code{\\enspace}（1en）、\code{\\quad} （1em）、そして\code{\\qquad}（2em）。

\begin{center}
\code{center}環境中（\code{\\begin\{center\} \dots \\end\{center\}}）では中央寄せとなります。 例えばこのパラグラフのように。
\end{center}

\section{分割}

SILEは行とページの分割を自ら決定します。後の章ではこのプロセスを微調整する\em{設定法}を紹介しましょう。しかしながら、SILEのplainクラスにもそれを助けるためのいくつかの方法が存在します。

パラグラフ間に挿入された\code{\\break}コマンドは\em{フレーム分割}を引き起こします。（\code{\\framebreak}と\code{\\eject}という同義のコマンドも存在します）もし、複数のフレームがページ内にあれば、—例えば、多段組みの文書—現在のフレームが終了し、次のフレームの先頭から処理は続けられます。\code{\\pagebreak}（あるいは\code{\\supereject}）はより強制力のあるもので、これはページ上に更なるフレームが残っていても新しいページを開始します。より穏やかな変種としては、\code{\\goodbreak}、これはSILEにそこが良いページ分割点であると教えるもの、があります。それとは反対に、\code{\\nobreak}は分割を抑止する働きがあります。これらの中間的なものとして、\code{\\allowbreak}があり、SILEにページやフレームの分割に適さないかもしれないが、それを許可するよう指示するものとして利用できます。

パラグラフの\em{中}では、これらのコマンドは全く別の意味を持ちます。\code{\\break}コマンドは改\em{行}を指示し、\em{同様に}、\code{\\goodbreak}、\code{\\nobreak}、および\code{\\allowbreak}も行分割に対応します。もしも\em{ページ分割}を特に禁止したければ、\code{\\novbreak}を使います。

\begin{raggedright}
SILEは通常、両端揃えを行います—すなわち、SILEは一行がちょうど与えられた行幅にぴったり収まるように単語間のスペースを調整します。\footnote{これはSILEが、常に一行を行幅に厳密に合うようにするということを意味しません。SILEはある程度の調整を行いますが、最善を尽くした後、最も悪くないと思われる結果を出力します。いくつかの語がわずかに余白に突き出る結果となることもあります。}両端揃え以外には左揃えがあります。左揃えでは単語間のスペースは均等になるかわり、パラグラフの右端はきれいに揃いません。左揃えはしばしば子供向けの本に用いられたり、新聞のような行幅が狭い状況でも用いられます。左揃えを行うには、文章を\code{\\begin\break\{raggedright\}}環境を囲います。このパラグラフは左揃えで組まれています。
\end{raggedright}

\begin{raggedleft}
同様に、\code{raggedleft}環境もあります。これはパラグラフの右側は揃え、逆に左はがたつきます。 このパラグラフは右揃えで組まれています。\par
\end{raggedleft}

\section{言語とハイフネーション}

SILEは現在選択されている言語の設定に基づいてハイフネーションを行います。（言語設定は前に見たように\code{\\font}コマンドで行います）SILEは様々な言語のハイフネーションをサポートしています。また、その言語特有の組版ルールについてもサポートすることを目的としています。

SILEはまた、\code{xx}という特別な「言語」、を理解します。これはなんのハイフネーションパターンもないものです。この言語に切り替えると、ハイフネーションは行われません。コマンド\code{\\nohyphenation\{\dots\}}が\code{\\font[language=xx]\{\dots\}}のショートカットとして利用できます。

ハイフネーション以外にも、言語ごとに組版上の規則は異なりますが、SILEはほとんどの言語とスクリプトに対する基本的なサポートを備えます。（もしもSILEが適切に処理出来ない言語やスクリプトがあれば知らせてください。対応します）

いくつかの言語では、同じ文字を使うが異なるように組まれるという状況が生じます。例えば、SindhiとUrduはアラビア文字\em{heh}を標準的なアラビア語とは異なるやり方で結合します。そのような場合は、あなたは\code{language}と\code{script}オプションを\command{\\font}コマンド中で適切に指定しなければなりません。

\begin{verbatim}
\line
Standard Arabic:
\\font[family=Scheherazade,direction=RTL,language=ar,script=Arab]\{ههه\};
then in Sindi:
\\font[family=Scheherazade,direction=RTL,language=snd,script=Arab]\{ههه\};
then in Urdu:
\\font[family=Scheherazade,direction=RTL,language=urd,script=Arab]\{ههه\}.
\line
\end{verbatim}

\begin{examplefont}
\line
Standard Arabic: \font[family=Scheherazade,direction=RTL,language=ar,script=Arab]{ههه};
then in Sindi: \font[family=Scheherazade,direction=RTL,language=snd,script=Arab]{ههه};
then in Urdu: \font[family=Scheherazade,direction=RTL,language=urd,script=Arab]{ههه}.
\line
\end{examplefont}

（\code{script}オプションの完全なリストについては\code{http://www.simon-cozens.org/content/duffers-guide-fontconfig-and-harfbuzz}を参照のこと）

\section{ファイルの取り込みとLuaコード}

長大な文書を作成するとき、あなたはSILE文書を複数のファイルに分割して管理したくなるでしょう。例えば、それぞれの章を別のファイルに小分けしたり、ユーザー定義のコマンドを開発し（第6章を参照）、それをひとまとめのファイルにして文書の本文とは分けて管理したり。その場合、異なるSILEファイルを取り込む必要があります。

その機能は\code{\\include}コマンドにより提供されます。これには、必須の\code{src=\em{<path>}}パラメータによりファイルへのパスを示す必要があります。 例えば、あなたは学位論文を次のように書きたくなるでしょう。

\begin{verbatim}
\line
\\begin[papersize=a4,class=thesis]\{document\}
\\include[src=macros]
\\include[src=chap1]
\\include[src=chap2]
\\include[src=chap3]
\dots\par
\\include[src=endmatter]
\\end\{document\}
\line
\end{verbatim}

\code{\\include}は入れ子になっても構いません。ファイルAがファイルBを取り込み、それがまたファイルCを取り込んだり。

SILEはLuaプログラム言語で書かれており、Luaインタプリタが実行時に利用可能です。ちょうどHTML文書中でJavascriptコードを\code{<script>}タグで実行するように、SILE文書中ではLuaコードを\code{\\script}コマンドを用いて実行可能です。（XML書式ではちょうどよく見えるでしょう）このコマンドはふたつの形態をとります。ひとつは\code{\\script[src=\em{<filename>}]}でLuaスクリプトをファイルごと取り込み、もうひとつは\code{\\script\{\dots\}}で、インラインのLuaコードです。

インラインで何か面白いことをやるにはSILEの内部に関する知識が必要です（幸運なことにコードはそれほど複雑ではない）が、とりあえず手始めに、Lua関数\code{SILE.typesetter:typeset(\dots)}を使ってみましょう。これはページにテキストを加えます。\code{SILE.call("\dots")}はSILEコマンドを呼び出し、\code{SILE.typesetter:leaveHmode()}は現在のパラグラフを終了し、テキストを出力します。 例として、

\begin{verbatim}
\line
\\begin\{script\}
  for i=1,10 do
    SILE.typesetter:typeset(i .. " x " .. i .. " = " .. i*i .. ". ")
    SILE.typesetter:leaveHmode()
    SILE.call("smallskip")
  end
\\end\{script\}
\line
\end{verbatim}

\noindent{}は以下を出力します。

\begin{examplefont}
\line
\begin{script}
  SILE.call("indent");SILE.typesetter:leaveHmode()
  for i=1,10 do
    SILE.typesetter:typeset(i .. " x " .. i .. " = " .. i*i .. ". ")
    SILE.typesetter:leaveHmode()
    SILE.call("smallskip")
  end
\end{script}
\line
\end{examplefont}

\end{document}
